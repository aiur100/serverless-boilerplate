service: ${file(./.env.${sls:stage}.json):SERVICE_NAME}
frameworkVersion: '3'
	
# New syntax
package:
  patterns:
    - api/**
    - api/*
    - node_modules/*
    - node_modules/**
    - '!node_modules/aws-sdk'
    - '!node_modules/dotenv'
    - '!node_modules/mocha'
    - '!node_modules/nodemon'
    - '!node_modules/serverless'
    - '!.serverless/*'
    - '!.serverless/**'
    - '!*.yml'
    - '!*.md'
    - '!.env'
    - '!vue-app/*'
    - '!vue-app/**'
    - '!vue-app'
    - '!my-dynamodb-data/*'
    - '!my-dynamodb-data/**'
    - '!local.sh'
    - '!*.json'
    - '.gitignore'
    - '!deploy.js'
    - '!node_modules/concurrently'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  profile: ${file(./.env.${sls:stage}.json):PROFILE}
  architecture: arm64
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment: ${file(./.env.${sls:stage}.json)}

functions:
  api:
    handler: api/handler.handler
    events:
      - httpApi: '*'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
    SpaSiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.STATIC_BUCKET}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
              ExposedHeaders:
                - "x-amz-server-side-encryption"
                - "x-amz-request-id"
                - "x-amz-id-2"
              Id: SpaSiteBucket
              MaxAge: 3000
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${sls:stage}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${sls:stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
  Outputs:
    SpaSSiteBucketOutputKey:
      Value: !Ref SpaSiteBucket
    UserPoolId:
      Value:
        Ref: CognitoUserPool
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
