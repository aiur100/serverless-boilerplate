service: work-load
frameworkVersion: '3'
	
# New syntax
package:
  patterns:
    - api/**
    - api/*
    - node_modules/*
    - node_modules/**
    - '!node_modules/aws-sdk'
    - '!.serverless/*'
    - '!.serverless/**'
    - '!*.yml'
    - '!*.md'
    - '!.env'
    - '!my-dynamodb-data/*'
    - '!my-dynamodb-data/**'


custom:
  tableName: 'users-table-${sls:stage}'
  photoBucket: 'test-photo-${sls:stage}'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  profile: pasley_hill_admin
  architecture: arm64
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment: ${file(./.env.${sls:stage}.json)}

functions:
  api:
    handler: api/handler.handler
    events:
      - httpApi: '*'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
    PhotoOverlayBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.photoBucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
              ExposedHeaders:
                - "x-amz-server-side-encryption"
                - "x-amz-request-id"
                - "x-amz-id-2"
              Id: RLECors
              MaxAge: 3000
        VersioningConfiguration:
          Status: "Enabled"
